package fr.unice.polytech.qgl.qae.strategy.ground;

import fr.unice.polytech.qgl.qae.actions.AbstractAction;
import fr.unice.polytech.qgl.qae.actions.Stop;
import fr.unice.polytech.qgl.qae.actions.groundActions.withparams.Exploit;
import fr.unice.polytech.qgl.qae.map.geometry.Coordinates;
import fr.unice.polytech.qgl.qae.map.FlyingMap;
import fr.unice.polytech.qgl.qae.map.GroundMap;
import fr.unice.polytech.qgl.qae.map.tile.GroundTile;

import fr.unice.polytech.qgl.qae.strategy.AbstractPhase;
import fr.unice.polytech.qgl.qae.strategy.AbstractStrategy;
import fr.unice.polytech.qgl.qae.strategy.GroundPhase;

/**
 * Created by user on 26/12/15.
 */
public class ExploitPhase extends GroundPhase {

    boolean complete;

    public ExploitPhase(AbstractStrategy parent, Coordinates currents_coords,FlyingMap m, GroundMap gm) {
        super(parent, currents_coords, m, gm);
       /*
        complete = false;

        if(parent.getMission().getBudget() < 50) {
            actions.add(new Stop());
        }

        GroundTile t = gm.getTile(currents_coords);

        for (int i = 0; i < parent.getMission().getContracts().size(); i++) {
            //ResourceTile resObj = parent.getMission().getContracts().get(i);
            t.getRessource().stream().filter((r) -> (resObj.getName().equals(r.getName()) && !resObj.getAmount().equals(r.getAmount()))).forEach((r) -> {
                if (resources.get(i).getResourceName().equals(r.getName())) {
                actions.add(new Exploit(r.getName()));
            });
        }
        complete = true;*/
    }

    @Override
    public AbstractPhase getNext() {
        if(actions.isEmpty() && complete)
            return new ScoutPhase(parent,currents_coords,map, gm);
        else
            return  this;
    }


    @Override
    public AbstractAction execute() {
        return actions.get(0);
    }

}